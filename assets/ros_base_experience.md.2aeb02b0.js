import{_ as a,o as l,c as p,z as s,a as e,t as o,V as r}from"./chunks/framework.29cad062.js";const g=JSON.parse('{"title":"ROS 初体验","description":"","frontmatter":{"title":"ROS 初体验"},"headers":[],"relativePath":"ros/base/experience.md","lastUpdated":1681960495000}'),c={name:"ros/base/experience.md"},t={id:"frontmatter-title",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}} :heart_eyes:"'},"​",-1),i=r(`<h2 id="创建功能包" tabindex="-1">创建功能包 <a class="header-anchor" href="#创建功能包" aria-label="Permalink to &quot;创建功能包&quot;">​</a></h2><p>终端下，进入ws00_helloworld/src目录，使用如下指令创建一个C++功能包：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg01_helloworld_cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--build-type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ament_cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rclcpp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--node-name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">helloworld</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完毕，在src目录下将生成一个名为pkg01_helloworld_cpp的目录，且目录中已经默认生成了一些子级文件与文件夹。</p><h2 id="编辑源文件" tabindex="-1">编辑源文件 <a class="header-anchor" href="#编辑源文件" aria-label="Permalink to &quot;编辑源文件&quot;">​</a></h2><p>进入pkg01_helloworld_cpp/src目录，该目录下有一helloworld.cpp文件，修改文件内容如下：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  // 初始化 ROS2</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(argc,argv);</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">make_shared</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld_node&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 输出文本</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">RCLCPP_INFO</span><span style="color:#E1E4E8;">(node-&gt;</span><span style="color:#B392F0;">get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="编辑配置文件" tabindex="-1">编辑配置文件 <a class="header-anchor" href="#编辑配置文件" aria-label="Permalink to &quot;编辑配置文件&quot;">​</a></h2><p>在步骤1创建功能包时所使用的指令已经默认生成且配置了配置文件，不过实际应用中经常需要自己编辑配置文件，所以在此对相关内容做简单介绍，所使用的配置文件主要有两个，分别是功能包下的package.xml与CMakeLists.txt。</p><h3 id="_1-package-xml" tabindex="-1">1.package.xml <a class="header-anchor" href="#_1-package-xml" aria-label="Permalink to &quot;1.package.xml&quot;">​</a></h3><p>文件内容如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml-model</span><span style="color:#B392F0;"> href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://download.ros.org/schema/package_format3.xsd&quot;</span><span style="color:#B392F0;"> schematypens</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;pkg01_helloworld_cpp&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;0.0.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">&gt;TODO: Package description&lt;/</span><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">maintainer</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ros2@todo.todo&quot;</span><span style="color:#E1E4E8;">&gt;ros2&lt;/</span><span style="color:#85E89D;">maintainer</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">license</span><span style="color:#E1E4E8;">&gt;TODO: License declaration&lt;/</span><span style="color:#85E89D;">license</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">buildtool_depend</span><span style="color:#E1E4E8;">&gt;ament_cmake&lt;/</span><span style="color:#85E89D;">buildtool_depend</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- 所需要依赖 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">depend</span><span style="color:#E1E4E8;">&gt;rclcpp&lt;/</span><span style="color:#85E89D;">depend</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">test_depend</span><span style="color:#E1E4E8;">&gt;ament_lint_auto&lt;/</span><span style="color:#85E89D;">test_depend</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">test_depend</span><span style="color:#E1E4E8;">&gt;ament_lint_common&lt;/</span><span style="color:#85E89D;">test_depend</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">export</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">build_type</span><span style="color:#E1E4E8;">&gt;ament_cmake&lt;/</span><span style="color:#85E89D;">build_type</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">export</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">package</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>注释部分以后需要根据实际的包依赖进行添加或修改。</p><h3 id="_2-cmakelists-txt" tabindex="-1">2.CMakeLists.txt <a class="header-anchor" href="#_2-cmakelists-txt" aria-label="Permalink to &quot;2.CMakeLists.txt&quot;">​</a></h3><p>文件内容如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">cmake_minimum_required</span><span style="color:#E1E4E8;">(VERSION </span><span style="color:#79B8FF;">3.8</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">project</span><span style="color:#E1E4E8;">(pkg01_helloworld_cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES </span><span style="color:#9ECBFF;">&quot;Clang&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">add_compile_options</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Wall </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Wextra </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Wpedantic)</span></span>
<span class="line"><span style="color:#B392F0;">endif</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># find dependencies</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(ament_cmake </span><span style="color:#FFAB70;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 引入外部依赖包</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(rclcpp </span><span style="color:#FFAB70;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 映射源文件与可执行文件</span></span>
<span class="line"><span style="color:#B392F0;">add_executable</span><span style="color:#E1E4E8;">(helloworld src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">helloworld.cpp)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 设置目标依赖库</span></span>
<span class="line"><span style="color:#B392F0;">ament_target_dependencies</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  helloworld</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;rclcpp&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 定义安装规则</span></span>
<span class="line"><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(TARGETS helloworld</span></span>
<span class="line"><span style="color:#E1E4E8;">  DESTINATION lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${PROJECT_NAME})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(BUILD_TESTING)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(ament_lint_auto </span><span style="color:#FFAB70;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  # the following line skips the linter which checks </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> copyrights</span></span>
<span class="line"><span style="color:#E1E4E8;">  # comment the line when a copyright and license is added to all source files</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(ament_cmake_copyright_FOUND </span><span style="color:#FFAB70;">TRUE</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  # the following line skips </span><span style="color:#B392F0;">cpplint</span><span style="color:#E1E4E8;"> (only works in a git </span><span style="color:#FFAB70;">repo</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  # comment the line when this package is in a git repo and when</span></span>
<span class="line"><span style="color:#E1E4E8;">  # a copyright and license is added to all source files</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(ament_cmake_cpplint_FOUND </span><span style="color:#FFAB70;">TRUE</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ament_lint_auto_find_test_dependencies</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">endif</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">ament_package</span><span style="color:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>中文注释部分以后可能需要根据实际情况修改。</p><h2 id="编译项目" tabindex="-1">编译项目 <a class="header-anchor" href="#编译项目" aria-label="Permalink to &quot;编译项目&quot;">​</a></h2><p>终端下进入到工作空间，执行如下指令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="执行项目" tabindex="-1">执行项目 <a class="header-anchor" href="#执行项目" aria-label="Permalink to &quot;执行项目&quot;">​</a></h2><p>终端下进入到工作空间，执行如下指令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install/setup.bash</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg01_helloworld_cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">helloworld</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>程序执行，在终端下将输出文本：&quot;hello world!&quot;。</p><h2 id="运行优化" tabindex="-1">运行优化 <a class="header-anchor" href="#运行优化" aria-label="Permalink to &quot;运行优化&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">注意</p><p>虽然这样设置的运行优化，在一定程度上方便了我们使用，但是，我认为没有必要<br> 其实就是一条命令的事情，<code>source install/setup.bash</code>, 没必要按下面设置<br> 如果你就是想优化，当这个danger不存在。</p></div><p>每次终端中执行工作空间下的节点时，都需要调用. install/setup.bash指令，使用不便，优化策略是，可以将该指令的调用添加进~/setup.bash，操作格式如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;source /{工作空间路径}/install/setup.bash&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>示例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;source /home/ros2/ws00_helloworld/install/setup.bash&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以后再启动终端时，无需手动再手动刷新环境变量，使用更方便。</p>`,31);function y(n,b,d,u,m,h){return l(),p("div",null,[s("h1",t,[e(o(n.$frontmatter.title)+" 😍 ",1),E]),i])}const _=a(c,[["render",y]]);export{g as __pageData,_ as default};
