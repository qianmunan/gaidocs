import{_ as a,o as l,c as p,z as s,a as e,t as o,V as r}from"./chunks/framework.c75b6473.js";const h=JSON.parse('{"title":"文件体系","description":"","frontmatter":{"title":"文件体系"},"headers":[],"relativePath":"ros/frame/fileSystem.md","lastUpdated":1681960495000}'),c={name:"ros/frame/fileSystem.md"},t={id:"frontmatter-title",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}}"'},"​",-1),i=r(`<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>立足系统架构，如下图所示，ROS2可以划分为三层：</p><ul><li><strong>操作系统层（OS Layer）</strong></li></ul><p>如前所述，ROS虽然称之为机器人操作系统，但实质只是构建机器人应用程序的软件开发工具包，ROS必须依赖于传统意义的操作系统，目前ROS2可以运行在Linux、Windows、Mac或RTOS上。</p><ul><li><strong>中间层（Middleware Layer）</strong></li></ul><p>主要由数据分发服务DDS与ROS2封装的关于机器人开发的中间件组成。DDS是一种去中心化的数据通讯方式，ROS2还引入了服务质量管理 （Quality of Service）机制，借助该机制可以保证在某些较差网络环境下也可以具备良好的通讯效果。ROS2中间件则主要由客户端库、DDS抽象层与进程内通讯API构成。</p><ul><li><strong>应用层（Application Layer）</strong></li></ul><p>是指开发者构建的应用程序，在应用程序中是以功能包为核心的，在功能包中可以包含源码、数据定义、接口等内容。</p><div align="center"><img src="https://gaidocs.oss-cn-hangzhou.aliyuncs.com/screenshot/ros2/Screenshot%20from%202023-04-19%2010-01-52.png"></div><p>对于一般开发者而言，工作内容主要集中在应用层，开发者一般通过实现具有某一特定功能的功能包来构建机器人应用程序。对应的我们所介绍的ROS2文件系统主要是指在硬盘上以功能包为核心的目录与文件的组织形式。</p><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p>功能包是ROS2应用程序的核心，但是功能包不能直接构建，必须依赖于工作空间，一个ROS2工作空间的目录结构如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">WorkSpace</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">自定义的工作空间。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build：存储中间文件的目录，该目录下会为每一个功能包创建一个单独子目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install：安装目录，该目录下会为每一个功能包创建一个单独子目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log：日志目录，用于存储日志文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src：用于存储功能包源码的目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">C++功能包</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.xml：包信息，比如:包名、版本、作者、依赖项。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CMakeLists.txt：配置编译规则，比如源文件、依赖项、目标文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src：C++源文件目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">include：头文件目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">msg：消息接口文件目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">srv：服务接口文件目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">action：动作接口文件目录。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>另外，无论是Python功能包还是C++功能包，都可以自定义一些配置文件相关的目录。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">C++或Python功能包</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">launch：存储launch文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rviz：存储rviz2配置相关文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">urdf：存储机器人建模文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">params：存储参数文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world：存储仿真环境相关文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">map：存储导航所需地图文件。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">......</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="源文件说明" tabindex="-1">源文件说明 <a class="header-anchor" href="#源文件说明" aria-label="Permalink to &quot;源文件说明&quot;">​</a></h2><p>在ROS2中，推荐以继承Node的方式来创建节点对象。 C++继承Node实现示例如下：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyNode</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">MyNode</span><span style="color:#E1E4E8;">():</span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node_name&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">RCLCPP_INFO</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">-&gt;</span><span style="color:#B392F0;">get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">[])</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(argc,argv);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">make_shared</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyNode</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>之所以继承比直接实例化Node更被推荐，是因为继承方式可以在一个进程内组织多个节点，这对于提高节点间的通信效率是很有帮助的，但是直接实例化则与该功能不兼容。</p><h2 id="配置文件说明" tabindex="-1">配置文件说明 <a class="header-anchor" href="#配置文件说明" aria-label="Permalink to &quot;配置文件说明&quot;">​</a></h2><p>在ROS2功能包中，经常需要开发者编辑一些配置文件以设置功能包的构建信息，功能包类型不同，所需修改的配置文件也有所不同。C++功能包的构建信息主要包含在package.xml与CMakeLists.txt中，Python功能包的构建信息则主要包含在package.xml和setup.py中，接下来我们就简单了解一下这些配置文件。</p><h3 id="package-xml" tabindex="-1">package.xml <a class="header-anchor" href="#package-xml" aria-label="Permalink to &quot;package.xml&quot;">​</a></h3><p>不管是何种类型的功能包，package.xml的格式都是类似的，在该文件中包含了包名、版本、作者、依赖项的信息，package.xml可以为colcon构建工具确定功能包的编译顺序。一个简单的package.xml示例如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">xml version</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#F97583;">?&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">xml</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://download.ros.org/schema/package_format3.xsd&quot;</span><span style="color:#E1E4E8;"> schematypens</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span style="color:#F97583;">?&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">package format</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">pkg01_helloworld_cpp</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#FDAEB7;font-style:italic;">0.0.0</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">description</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">TODO</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Package description</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">description</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">maintainer email</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ros2@todo.todo&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ros2</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">maintainer</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">license</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">TODO</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> License declaration</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">license</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">buildtool_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ament_cmake</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">buildtool_depend</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">rclcpp</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">depend</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">test_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ament_lint_auto</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">test_depend</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">test_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ament_lint_common</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">test_depend</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">export</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">build_type</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">ament_cmake</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">build_type</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">export</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">package</span><span style="color:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol><li>根标签</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">package</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：该标签为整个xml文件的根标签，format属性用来声明文件的格式版本。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.元信息标签</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：包名；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：包的版本号；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">description</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：包的描述信息；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">maintainer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：维护者信息；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">license</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：软件协议；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：包的介绍网址；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">author</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：包的作者信息。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>3.依赖项</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">buildtool_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：声明编译工具依赖；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">build_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：声明编译依赖；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">build_export_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：声明根据此包构建库所需依赖；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">exec_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：声明执行时依赖；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：相当于</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">build_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">、</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">build_export_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">、</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">exec_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">三者的集成；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">test_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：声明测试依赖；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">doc_depend</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">：声明构建文档依赖。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="cmakelists-txt" tabindex="-1">CMakeLists.txt <a class="header-anchor" href="#cmakelists-txt" aria-label="Permalink to &quot;CMakeLists.txt&quot;">​</a></h3><p>C++功能包中需要配置CMakeLists.txt文件，该文件描述了如何构建C++功能包，一个简单的CMakeLists.txt示例如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;"># 声明cmake的最低版本</span></span>
<span class="line"><span style="color:#B392F0;">cmake_minimum_required</span><span style="color:#E1E4E8;">(VERSION </span><span style="color:#79B8FF;">3.8</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 包名，需要与package.xml中的包名一致</span></span>
<span class="line"><span style="color:#B392F0;">project</span><span style="color:#E1E4E8;">(pkg01_helloworld_cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES </span><span style="color:#9ECBFF;">&quot;Clang&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">add_compile_options</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Wall </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Wextra </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Wpedantic)</span></span>
<span class="line"><span style="color:#B392F0;">endif</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># find dependencies</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(ament_cmake </span><span style="color:#FFAB70;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 引入外部依赖包</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(rclcpp </span><span style="color:#FFAB70;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 映射源文件与可执行文件</span></span>
<span class="line"><span style="color:#B392F0;">add_executable</span><span style="color:#E1E4E8;">(helloworld src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">helloworld.cpp)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 设置目标依赖库</span></span>
<span class="line"><span style="color:#B392F0;">ament_target_dependencies</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  helloworld</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;rclcpp&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"># 定义安装规则</span></span>
<span class="line"><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(TARGETS helloworld</span></span>
<span class="line"><span style="color:#E1E4E8;">  DESTINATION lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${PROJECT_NAME})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(BUILD_TESTING)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(ament_lint_auto </span><span style="color:#FFAB70;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  # the following line skips the linter which checks </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> copyrights</span></span>
<span class="line"><span style="color:#E1E4E8;">  # comment the line when a copyright and license is added to all source files</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(ament_cmake_copyright_FOUND </span><span style="color:#FFAB70;">TRUE</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  # the following line skips </span><span style="color:#B392F0;">cpplint</span><span style="color:#E1E4E8;"> (only works in a git </span><span style="color:#FFAB70;">repo</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  # comment the line when this package is in a git repo and when</span></span>
<span class="line"><span style="color:#E1E4E8;">  # a copyright and license is added to all source files</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(ament_cmake_cpplint_FOUND </span><span style="color:#FFAB70;">TRUE</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ament_lint_auto_find_test_dependencies</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">endif</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">ament_package</span><span style="color:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="操作命令" tabindex="-1">操作命令 <a class="header-anchor" href="#操作命令" aria-label="Permalink to &quot;操作命令&quot;">​</a></h2><p>ROS2的文件系统核心是功能包，我们可以通过编译指令colcon和ROS2内置的工具指令ros2来实现功能包的创建、编译、查找与执行等相关操作。</p><h3 id="_1-创建" tabindex="-1">1.创建 <a class="header-anchor" href="#_1-创建" aria-label="Permalink to &quot;1.创建&quot;">​</a></h3><p>新建功能包语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">包名</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--build-type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">构建类型</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">依赖列表</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--node-name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可执行程序名称</span></span>
<span class="line"><span style="color:#B392F0;">格式解释：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">--build-</span><span style="color:#79B8FF;">type</span><span style="color:#B392F0;">：是指功能包的构建类型，有cmake、ament_cmake、ament_python三种类型可选；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">--dependencies：所依赖的功能包列表；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">--node-name：可执行程序的名称，会自动生成对应的源文件并生成配置文件。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-编译" tabindex="-1">2.编译 <a class="header-anchor" href="#_2-编译" aria-label="Permalink to &quot;2.编译&quot;">​</a></h3><p>编译功能包语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span>
<span class="line"><span style="color:#B392F0;">或</span></span>
<span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--packages-select</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">功能包列表</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>前者会构建工作空间下的所有功能包，后者可以构建指定功能包。</p><h3 id="_3-查找" tabindex="-1">3.查找 <a class="header-anchor" href="#_3-查找" aria-label="Permalink to &quot;3.查找&quot;">​</a></h3><p>在ros2 pkg命令下包含了多个查询功能包相关信息的参数。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">executables</span><span style="color:#E1E4E8;"> [包名] </span><span style="color:#6A737D;"># 输出所有功能包或指定功能包下的可执行程序。</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 列出所有功能包</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">包名</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 列出功能包路径</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xml</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 输出功能包的package.xml内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-执行" tabindex="-1">4.执行 <a class="header-anchor" href="#_4-执行" aria-label="Permalink to &quot;4.执行&quot;">​</a></h3><p>执行命令语法如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">功能包</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可执行程序</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,48);function y(n,b,F,d,u,m){return l(),p("div",null,[s("h1",t,[e(o(n.$frontmatter.title)+" ",1),E]),i])}const B=a(c,[["render",y]]);export{h as __pageData,B as default};
