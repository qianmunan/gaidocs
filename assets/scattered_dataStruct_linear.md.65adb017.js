import{_ as t,o as c,c as r,z as s,a as n,t as E,G as l,B as p,V as o,D as i}from"./chunks/framework.055571f3.js";const os=JSON.parse('{"title":"线性表","description":"","frontmatter":{"title":"线性表"},"headers":[],"relativePath":"scattered/dataStruct/linear.md","filePath":"scattered/dataStruct/linear.md","lastUpdated":1691674058000}'),y={name:"scattered/dataStruct/linear.md"},u={id:"frontmatter-title",tabindex:"-1"},b=s("img",{src:"https://gaidocs.oss-cn-hangzhou.aliyuncs.com/emoji/202305101625732.png",width:"46",height:"46",alt:"图片描述",style:{display:"inline","margin-bottom":"-12px"}},null,-1),d=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}} <img src="https://gaidocs.oss-cn-hangzhou.aliyuncs.com/emoji/202305101625732.png" width="46" height="46" alt="图片描述" style="display:inline; margin-bottom: -12px"/>"'},"​",-1),F=o('<h2 id="线性表的定义和基本操作" tabindex="-1">线性表的定义和基本操作 <a class="header-anchor" href="#线性表的定义和基本操作" aria-label="Permalink to &quot;线性表的定义和基本操作&quot;">​</a></h2><h3 id="线性表的定义" tabindex="-1">线性表的定义 <a class="header-anchor" href="#线性表的定义" aria-label="Permalink to &quot;线性表的定义&quot;">​</a></h3><p>线性表是由一组具有相同数据类型的元素组成的有序序列，它具有以下特点：</p><ul><li>有序性：线性表中的元素按照一定的次序排列，每个元素都有一个确定的位置。</li><li>相同数据类型：线性表中的元素具有相同的数据类型。因此每个元素战友相同大小的存储空间。</li><li>元素个数有限：线性表的长度是有限的，它可以是空表（元素个数为0）或非空表（元素个数大于0）。</li><li>元素具有抽象性：仅讨论元素间的逻辑关系，不考虑元素究竟表示什么。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>线性表是一种逻辑结构，表示元素之间一对一的相邻关系。顺序表和链表指的是存储结构。</p></div><h3 id="线性表的基本操作" tabindex="-1">线性表的基本操作 <a class="header-anchor" href="#线性表的基本操作" aria-label="Permalink to &quot;线性表的基本操作&quot;">​</a></h3><p>下面给出了对线性表的基本操作进行函数定义、参数说明和相应的意义：</p>',7),m=s("thead",null,[s("tr",null,[s("th",null,"函数名"),s("th",null,"参数"),s("th",null,"意义")])],-1),h=s("td",null,"无",-1),_=s("td",null,"初始化一个空线性表",-1),B=s("tr",null,[s("td",null,"ListEmpty(L)"),s("td",null,"线性表"),s("td",null,"判断线性表是否为空")],-1),g=s("tr",null,[s("td",null,"ClearList(&L)"),s("td",null,"线性表"),s("td",null,"清空线性表")],-1),A=s("tr",null,[s("td",null,"GetElem(L,i)"),s("td",null,"线性表、位置"),s("td",null,"获取指定位置的元素")],-1),D=s("tr",null,[s("td",null,"LocateElem(L,e)"),s("td",null,"线性表、元素"),s("td",null,"查找指定元素的位置")],-1),f=s("tr",null,[s("td",null,"ListInsert(&L,i,e)"),s("td",null,"线性表、位置、元素"),s("td",null,"在指定位置插入元素")],-1),q=s("tr",null,[s("td",null,"ListDelete(&L,i&e)"),s("td",null,"线性表、位置"),s("td",null,"删除指定位置的元素")],-1),S=s("tr",null,[s("td",null,"ListLength(L)"),s("td",null,"线性表"),s("td",null,"获取线性表的长度")],-1),k=o(`<p>这些函数定义和功能可根据具体的编程语言进行实现，参数类型和返回值类型可以根据需要进行调整。</p><h2 id="线性表的顺序表示" tabindex="-1">线性表的顺序表示 <a class="header-anchor" href="#线性表的顺序表示" aria-label="Permalink to &quot;线性表的顺序表示&quot;">​</a></h2><p>线性表的表示方式有两种常见形式：</p><ul><li>数组顺序表：使用一段连续的存储空间来存储线性表的元素，元素在内存中的存储位置与其在逻辑上的顺序相同。</li><li>链表：由一组通过指针链接的节点组成，每个节点包含一个数据元素和指向下一个节点的指针。链表的元素在内存中的存储位置是非连续的。</li></ul><h3 id="顺序表的定义" tabindex="-1">顺序表的定义 <a class="header-anchor" href="#顺序表的定义" aria-label="Permalink to &quot;顺序表的定义&quot;">​</a></h3><p>顺序表是一种线性表的存储结构，它通过一段连续的存储空间来存储线性表的元素。在顺序表中，元素的存储位置与其在逻辑上的顺序相同。</p><p>顺序表的定义可以分为以下几个要素：</p><ol><li>存储空间：顺序表使用一段连续的存储空间来存储元素。这段存储空间可以是数组或者是动态分配的内存空间。</li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// C++ 动态分配</span></span>
<span class="line"><span style="color:#E1E4E8;">L.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElemType</span><span style="color:#E1E4E8;">(InitSize);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// C 动态分配</span></span>
<span class="line"><span style="color:#E1E4E8;">L.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ElemType</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(ElemType)</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">InitSize);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><p>元素类型：顺序表中的元素具有相同的数据类型，可以是整数、字符、对象等。</p></li><li><p>元素个数：顺序表的长度是固定的，它的元素个数可以是0个或者多个。</p></li><li><p>元素位置：顺序表中元素的位置由元素在存储空间中的索引表示，常用从0开始的整数作为索引来表示元素的位置关系。</p></li></ol><p>顺序表的定义可以用以下形式表示：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ElementType data[MAX_SIZE];</span><span style="color:#6A737D;"> // 存储数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length;</span><span style="color:#6A737D;"> // 线性表的当前长度</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#B392F0;">SeqList</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中，<code>ElementType</code>代表顺序表中元素的数据类型，<code>MAX_SIZE</code>表示顺序表所能容纳的最大元素个数。<code>data</code>数组用于存储顺序表中的元素，<code>length</code>表示当前顺序表中元素的个数。</p>`,13),v={class:"tip custom-block"},C=s("p",{class:"custom-block-title"},"注意",-1),L=s("h3",{id:"顺序表的特点",tabindex:"-1"},[n("顺序表的特点 "),s("a",{class:"header-anchor",href:"#顺序表的特点","aria-label":'Permalink to "顺序表的特点"'},"​")],-1),P=s("p",null,"下面我将对顺序表的特点进行分层次的重点描述。",-1),x=s("p",null,"存储结构：",-1),T=s("strong",null,"一段连续的存储空间",-1),I=s("li",null,"这种存储结构使得顺序表在内存中的存储是连续的，可以通过下标直接访问指定位置的元素，实现了随机访问的能力。",-1),V=s("p",null,"随机访问：",-1),w=s("strong",null,"通过下标可以直接访问顺序表中的任意元素",-1),M=s("strong",null,"查找、修改或删除",-1),X=s("p",null,"长度固定：",-1),Z=s("strong",null,"即，顺序表的长度是固定的",-1),N=s("li",null,"当顺序表已满时，无法再进行插入操作；当顺序表为空时，无法再进行删除操作。",-1),z=s("li",null,"这要求在设计顺序表时需要事先对其最大容量进行合理的估计，以满足实际需求。",-1),$=s("p",null,"元素移动：",-1),R=s("li",null,"在顺序表插入和删除操作中，需要进行元素的移动。",-1),j=s("li",null,"这个元素的移动会导致插入和删除操作的时间复杂度较高，尤其当顺序表元素数量较多时，性能会受到影响。",-1),G=s("p",null,"适合随机访问和元素稳定的场景：",-1),J=s("strong",null,"对于需要根据元素位置进行频繁访问、修改、删除操作的场景具有较好的性能",-1),O=s("li",null,"适用于元素访问频率较高、元素顺序相对稳定的应用场景，如数组、矩阵、静态表等。",-1),U=s("p",null,"内存连续性要求：",-1),H=s("li",null,"顺序表要求元素在内存中的存储是连续的，这使得顺序表具有较低的存储空间开销。",-1),K=s("strong",null,"当需要动态添加元素超过初始容量时，会涉及到重新分配更大的内存空间，导致性能开销",-1),Q=o(`<p>以上是针对顺序表特点的分层次重点描述。通过了解这些特点，可以更好地理解顺序表的使用场景和限制，从而在实际编程中做出更好的选择。</p><h3 id="顺序表上的基本操作的实现" tabindex="-1">顺序表上的基本操作的实现 <a class="header-anchor" href="#顺序表上的基本操作的实现" aria-label="Permalink to &quot;顺序表上的基本操作的实现&quot;">​</a></h3><br><h4 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h4><p>当使用C++实现顺序表的插入操作时，可以按照以下步骤进行：</p><ol><li>创建一个顺序表，并确定表的最大长度。</li><li>定义一个插入函数，接收顺序表、要插入的元素和插入位置作为参数。</li><li>判断插入位置的合法性，确保插入位置在有效范围内。</li><li>如果顺序表已满，则无法进行插入操作。</li><li>将插入位置之后的元素都向后移动一位，给插入位置留出空间。</li><li>将要插入的元素放置在插入位置上。</li><li>更新顺序表的长度。</li><li>完成插入操作。</li></ol><p>示例代码，实现了顺序表的插入操作：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 最大顺序表长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SeqList</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> data[MAX_SIZE];</span><span style="color:#6A737D;">  // 数据数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length;</span><span style="color:#6A737D;">          // 当前长度</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 插入元素到顺序表的指定位置</span></span>
<span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">SeqList</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">position</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 检查插入位置的合法性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (position </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> position </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> list.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> list.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> MAX_SIZE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 将插入位置之后的元素向后移动一位</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.length; i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> position; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.data[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.data[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 将元素插入到指定位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[position] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SeqList list;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 初始化顺序表长度为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 测试插入操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(list, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">    // 在位置0插入元素10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(list, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">    // 在位置1插入元素20</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(list, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">    // 在位置2插入元素30</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 打印顺序表中的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> list.data[i] </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>这段代码中，首先定义了一个<code>SeqList</code>结构体，其中包含一个整型数组<code>data</code>用于存储数据，以及一个整型变量<code>length</code>表示当前的长度。</p><p>接着定义了一个<code>insert</code>函数，该函数接收顺序表、要插入的元素和插入位置作为参数，实现了顺序表的插入操作。在函数中，首先判断插入位置的合法性，然后将插入位置之后的元素都向后移动一位，给插入位置留出空间，并将要插入的元素放置在插入位置上，最后更新顺序表的长度。</p><p>在<code>main</code>函数中，创建了一个顺序表<code>list</code>，然后通过调用<code>insert</code>函数，依次在顺序表中插入了元素10、20和30，并打印出顺序表中的所有元素。</p><h4 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h4><p>当使用C++实现顺序表的删除操作时，可以按照以下步骤进行：</p><ol><li>创建一个顺序表，并确定表的当前长度。</li><li>定义一个删除函数，接收顺序表和要删除的位置作为参数。</li><li>判断删除位置的合法性，确保删除位置在有效范围内。</li><li>将删除位置之后的元素都向前移动一位，覆盖要删除的元素。</li><li>更新顺序表的长度，使其减1。</li><li>完成删除操作。</li></ol><p>以下是一个示例代码，实现了顺序表的删除操作：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 最大顺序表长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SeqList</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> data[MAX_SIZE];</span><span style="color:#6A737D;">  // 数据数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length;</span><span style="color:#6A737D;">          // 当前长度</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除顺序表中指定位置的元素</span></span>
<span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">SeqList</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">position</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 检查删除位置的合法性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (position </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> position </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> list.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 将删除位置之后的元素都向前移动一位</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> position; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        list.data[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.data[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 更新顺序表的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SeqList list;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 初始化顺序表长度为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 添加一些元素到顺序表中</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(list, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  // 删除位置1的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 打印顺序表中的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> list.data[i] </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>在我们的示例中，首先定义了一个<code>SeqList</code>结构体，其中包含一个整型数组<code>data</code>用于存储数据，以及一个整型变量<code>length</code>表示当前的长度。</p><p>接着定义了一个<code>remove</code>函数，该函数接收顺序表和要删除的位置作为参数，实现了顺序表的删除操作。在函数中，首先判断删除位置的合法性，然后将删除位置之后的元素都向前移动一位，覆盖要删除的元素，最后更新顺序表的长度。</p><p>在<code>main</code>函数中，创建了一个顺序表<code>list</code>，并手动添加了一些元素。然后调用<code>remove</code>函数，删除了位置1的元素，并打印出删除后顺序表中的所有元素。</p><h4 id="按值查找" tabindex="-1">按值查找 <a class="header-anchor" href="#按值查找" aria-label="Permalink to &quot;按值查找&quot;">​</a></h4><p>当使用C++实现顺序表的按值查找操作时，可以按照以下步骤进行：</p><ol><li>创建一个顺序表，并确定表的当前长度。</li><li>定义一个按值查找函数，接收顺序表和要查找的值作为参数。</li><li>通过遍历顺序表的元素，逐个与目标值进行比较，直到找到匹配的元素或遍历完整个顺序表。</li><li>如果找到了匹配的元素，返回它的位置；否则，返回一个表示未找到的特殊值（例如-1）。</li><li>完成按值查找操作。 示例代码，实现了顺序表的按值查找操作：</li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> MAX_SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 最大顺序表长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SeqList</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> data[MAX_SIZE];</span><span style="color:#6A737D;">  // 数据数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length;</span><span style="color:#6A737D;">          // 当前长度</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 按值查找顺序表中指定值的位置</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">SeqList</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (list.data[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> i;</span><span style="color:#6A737D;">  // 找到匹配的值，返回其位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 未找到匹配的值</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SeqList list;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  // 初始化顺序表长度为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 添加一些元素到顺序表中</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.data[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 按值查找元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> position </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(list, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  // 查找值为20的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (position </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;找到了，位置是：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> position </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;未找到目标值&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>在示例代码中，首先定义了一个<code>SeqList</code>结构体，其中包含一个整型数组<code>data</code>用于存储数据，以及一个整型变量<code>length</code>表示当前的长度。</p><p>然后定义了一个<code>search</code>函数，该函数接收顺序表和要查找的值作为参数，实现了顺序表的按值查找操作。函数通过遍历顺序表的元素，逐个与目标值进行比较，如果找到了匹配的值，则返回其位置；否则，返回一个表示未找到的特殊值-1。</p><p>在<code>main</code>函数中，创建了一个顺序表<code>list</code>，并手动添加了一些元素。然后调用<code>search</code>函数，查找值为20的元素，并根据返回的结果进行输出。</p><h2 id="线性表的链式表示" tabindex="-1">线性表的链式表示 <a class="header-anchor" href="#线性表的链式表示" aria-label="Permalink to &quot;线性表的链式表示&quot;">​</a></h2><p>顺序表的存储位置可以用一个简单直观的公式表示，它可以随即存取表中任意一个元素，但插入和删除操作需要移动大量元素。链式存储线性表时，不需要使用地址连续的存储单元。但会失去顺序表可随机访问的优点。</p><h3 id="单链表的定义" tabindex="-1">单链表的定义 <a class="header-anchor" href="#单链表的定义" aria-label="Permalink to &quot;单链表的定义&quot;">​</a></h3><h3 id="单链表上基本操作的实现" tabindex="-1">单链表上基本操作的实现 <a class="header-anchor" href="#单链表上基本操作的实现" aria-label="Permalink to &quot;单链表上基本操作的实现&quot;">​</a></h3><h3 id="双链表" tabindex="-1">双链表 <a class="header-anchor" href="#双链表" aria-label="Permalink to &quot;双链表&quot;">​</a></h3><h3 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h3><h3 id="静态链表" tabindex="-1">静态链表 <a class="header-anchor" href="#静态链表" aria-label="Permalink to &quot;静态链表&quot;">​</a></h3><h3 id="顺序表和链表的比较" tabindex="-1">顺序表和链表的比较 <a class="header-anchor" href="#顺序表和链表的比较" aria-label="Permalink to &quot;顺序表和链表的比较&quot;">​</a></h3>`,34);function W(e,Y,ss,ns,as,ls){const a=i("font");return c(),r("div",null,[s("h1",u,[n(E(e.$frontmatter.title)+" ",1),b,n(),d]),F,s("table",null,[m,s("tbody",null,[s("tr",null,[s("td",null,[l(a,{color:"#5D3FD3"},{default:p(()=>[n("InitList(&L)")]),_:1})]),h,_]),B,g,A,D,f,q,S])]),k,s("div",v,[C,s("p",null,[n("动态分配并不是链式存储，他只是一种获取内存空间的方式。因为他的物理结构并没有发生变化，依然是随即存取方式。 顺序表最主要的特点是"),l(a,{color:"red"},{default:p(()=>[n("随机访问")]),_:1}),n(" 顺序表的"),l(a,{color:"red"},{default:p(()=>[n("存储密度高")]),_:1}),n("，每个节点之存储数据元素。 顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。")])]),L,P,s("ol",null,[s("li",null,[x,s("ul",null,[s("li",null,[n("顺序表使用"),l(a,{color:"#5D3FD3"},{default:p(()=>[T]),_:1}),n("来存储元素，通常是使用数组来实现。")]),I])]),s("li",null,[V,s("ul",null,[s("li",null,[n("顺序表中元素的存储位置与其在逻辑上的顺序一一对应，"),l(a,{color:"#5D3FD3"},{default:p(()=>[w]),_:1}),n("。")]),s("li",null,[n("这种随机访问的特点使得在顺序表中"),l(a,{color:"#5D3FD3"},{default:p(()=>[M]),_:1}),n("指定位置的元素非常高效。")])])]),s("li",null,[X,s("ul",null,[s("li",null,[n("在创建顺序表时需要指定其最大容量。"),l(a,{color:"#5D3FD3"},{default:p(()=>[Z]),_:1}),n("。")]),N,z])]),s("li",null,[$,s("ul",null,[R,s("li",null,[s("strong",null,[l(a,{color:"#5D3FD3"},{default:p(()=>[n("插入操作需要将插入位置及之后的元素向后移动，删除操作需要将删除位置之后的元素向前移动。")]),_:1})])]),j])]),s("li",null,[G,s("ul",null,[s("li",null,[n("顺序表由于其随机访问特性，"),l(a,{color:"#5D3FD3"},{default:p(()=>[J]),_:1}),n("。")]),O])]),s("li",null,[U,s("ul",null,[H,s("li",null,[n("但也限制了顺序表的动态扩容能力，"),l(a,{color:"#5D3FD3"},{default:p(()=>[K]),_:1}),n("。")])])])]),Q])}const es=t(y,[["render",W]]);export{os as __pageData,es as default};
