import{_ as l}from"./chunks/Iframe.e3b129fc.js";import{_ as o,o as e,c as p,z as s,a as r,t as c,G as t,V as i}from"./chunks/framework.055571f3.js";const f=JSON.parse('{"title":"集成开发环境搭建","description":"","frontmatter":{"title":"集成开发环境搭建"},"headers":[],"relativePath":"ros/base/integration.md","filePath":"ros/base/integration.md","lastUpdated":1681960495000}'),E={name:"ros/base/integration.md"},d={id:"frontmatter-title",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}} :motor_scooter:"'},"​",-1),b={class:"tip custom-block"},u=s("p",{class:"custom-block-title"},"开始之前先听个音乐",-1),m=i(`<div class="tip custom-block"><p class="custom-block-title">说在前面</p><p>在学习过程中，根据老师的教程，使用的VsCode,但是在某一天，给挂了（没有了代码提示）。😭<br> 这对于一个写代码的文员来说，是一个极其烦的事情。<br> 所以我改变了我的集成开发环境，使用的是Clion<br> 至于它的安装这里就不详细介绍了，各位各显神通吧 🥰</p></div><h2 id="官方教程" tabindex="-1">官方教程 <a class="header-anchor" href="#官方教程" aria-label="Permalink to &quot;官方教程&quot;">​</a></h2><p>我先把官方的教程贴出来，英语好的同学可以阅读一下。<a href="https://www.jetbrains.com/help/clion/ros2-tutorial.html#create-ext-tool" target="_blank" rel="noreferrer">官方教程</a><br></p><h2 id="创建一个ros2功能包" tabindex="-1">创建一个Ros2功能包 <a class="header-anchor" href="#创建一个ros2功能包" aria-label="Permalink to &quot;创建一个Ros2功能包&quot;">​</a></h2><ol><li>创建你的工作空间 <code>mkdir -p ws00_helloworld/src</code></li><li>在工作空间中编译整个项目 <code>colcon build</code></li><li>进入工作空间中的src目录下创建第一个功能包</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;"># 使用 C++ 进行编写</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg01_helloworld_cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--build-type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ament_cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rclcpp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--node-name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">helloworld</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行完毕，在src目录下将生成一个名为pkg01_helloworld_cpp的目录，且目录中已经默认生成了一些子级文件与文件夹。</p><h2 id="简单写一点代码" tabindex="-1">简单写一点代码 <a class="header-anchor" href="#简单写一点代码" aria-label="Permalink to &quot;简单写一点代码&quot;">​</a></h2><p>进入pkg01_helloworld_cpp/src目录，该目录下有一helloworld.cpp文件，修改文件内容如下：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  // 初始化 ROS2</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(argc,argv);</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">make_shared</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld_node&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 输出文本</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">RCLCPP_INFO</span><span style="color:#E1E4E8;">(node-&gt;</span><span style="color:#B392F0;">get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  // 释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h2><p>终端下进入到工作空间，执行如下指令：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cmake-args</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DCMAKE_EXPORT_COMPILE_COMMANDS=ON</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cmake-args</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DCMAKE_EXPORT_COMPILE_COMMANDS=ON</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-G</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Ninja</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="danger custom-block"><p class="custom-block-title">注意</p><p>注意，CMAKE_EXPORT_COMPILE_COMMANDS选项只有在CMake使用Makefile或Ninja生成器时可用，可以通过-G选项指定。<br></p></div><p>构建完成后，在build目录下会生成一个compile_commands.json文件。<br></p><h2 id="运行clion" tabindex="-1">运行CLion <a class="header-anchor" href="#运行clion" aria-label="Permalink to &quot;运行CLion&quot;">​</a></h2><p>在CLion中打开ROS2项目<br></p><ul><li><p>在<code>File | Open</code>中选择刚刚生成的<code>compile_commands.json</code>文件并<code>“Open as Project”</code>。</p></li><li><p>然而CLion把build文件夹当成了工程的根目录。所以我们可以点击 <code>Tools | Compilation Database | Change Project Root</code>把根目录替换为你的ROS2工作空间文件夹</p></li></ul><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>当你在加入新的 C++ 文件的时候，编辑器CLion不会将它识别!! 😭</p></div><p>解决：</p><ol><li>创建完新的 C++ 文件后，我们先编译一下，这里可能会出错，先不用管他</li><li>在回到CLion查看，你会发现，该文件就会加入到ROS2的环境中来，至于为什么，我没有想明白</li></ol>`,24);function h(a,F,_,C,g,B){const n=l;return e(),p("div",null,[s("h1",d,[r(c(a.$frontmatter.title)+" 🛵 ",1),y]),s("div",b,[u,t(n,{mylink:"//music.163.com/outchain/player?type=2&id=1306923998&auto=1&height=66"})]),m])}const P=o(E,[["render",h]]);export{f as __pageData,P as default};
