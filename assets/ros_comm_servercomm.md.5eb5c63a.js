import{_ as r,o as c,c as t,z as n,a as s,t as E,G as p,B as e,V as a,D as i}from"./chunks/framework.c75b6473.js";const f=JSON.parse('{"title":"服务通信","description":"","frontmatter":{"title":"服务通信"},"headers":[],"relativePath":"ros/comm/servercomm.md","lastUpdated":1681998807000}'),y={name:"ros/comm/servercomm.md"},b={id:"frontmatter-title",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}}"'},"​",-1),u=a('<h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>服务通信也是ROS中一种极其常用的通信模式，服务通信是基于请求响应模式的，是一种应答机制。也即：一个节点A向另一个节点B发送请求，B接收处理请求并产生响应结果返回给A。比如如下场景：</p><blockquote><p>机器人巡逻过程中，控制系统分析传感器数据发现可疑物体或人... 此时需要拍摄照片并留存。</p></blockquote><p>在上述场景中，就使用到了服务通信。</p><ul><li>数据分析节点A需要向相机相关节点B发送图片存储请求，节点B处理请求，并返回处理结果。</li></ul><p>与上述应用类似的，服务通信更适用于对实时性有要求、具有一定逻辑处理的应用场景。</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>服务通信是以请求响应的方式实现不同节点之间数据传输的通信模式。发送请求数据的对象称为客户端，接收请求并发送响应的对象称之为服务端，同话题通信一样，客户端和服务端也通过话题相关联，不同的是服务通信的数据传输是双向交互式的。</p><div align="center"><img src="https://gaidocs.oss-cn-hangzhou.aliyuncs.com/screenshot/ros2/server1.gif"></div>',9),d=n("div",{align:"center"},[n("img",{src:"https://gaidocs.oss-cn-hangzhou.aliyuncs.com/screenshot/ros2/server2.gif"})],-1),m=a(`<h2 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h2><p>编写服务通信，客户端可以提交两个整数到服务端，服务端接收请求并解析两个整数求和，然后将结果响应回客户端。</p><h3 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h3><p>在上述案例中，需要关注的要素有三个：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">客户端；</span></span>
<span class="line"><span style="color:#B392F0;">服务端；</span></span>
<span class="line"><span style="color:#B392F0;">消息载体。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="实现流程" tabindex="-1">实现流程 <a class="header-anchor" href="#实现流程" aria-label="Permalink to &quot;实现流程&quot;">​</a></h3><p>案例实现前需要先自定义服务接口，接口准备完毕后，服务实现主要步骤如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">编写服务端实现；</span></span>
<span class="line"><span style="color:#B392F0;">编写客户端实现；</span></span>
<span class="line"><span style="color:#B392F0;">编辑配置文件；</span></span>
<span class="line"><span style="color:#B392F0;">编译；</span></span>
<span class="line"><span style="color:#B392F0;">执行。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="开始前准备" tabindex="-1">开始前准备 <a class="header-anchor" href="#开始前准备" aria-label="Permalink to &quot;开始前准备&quot;">​</a></h3><p>终端下进入工作空间的src目录，调用如下两条命令分别创建C++功能包</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp02_service</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--build-type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ament_cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dependencies</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rclcpp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">base_interfaces_demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="编码" tabindex="-1">编码 <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;编码&quot;">​</a></h2><h3 id="消息接口" tabindex="-1">消息接口 <a class="header-anchor" href="#消息接口" aria-label="Permalink to &quot;消息接口&quot;">​</a></h3><p>定义服务接口消息与定义话题接口消息流程类似，主要步骤如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">创建并编辑</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.srv文件；</span></span>
<span class="line"><span style="color:#B392F0;">编辑配置文件；</span></span>
<span class="line"><span style="color:#B392F0;">编译；</span></span>
<span class="line"><span style="color:#B392F0;">测试。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来，我们可以参考案例编写一个srv文件，该文件中包含请求数据(两个整型字段)与响应数据(一个整型字段)。</p><ol><li><strong>创建并编辑 .srv 文件</strong></li></ol><p>功能包base_interfaces_demo下新建srv文件夹，srv文件夹下新建AddInts.srv文件，文件中输入如下内容：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">int32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num1</span></span>
<span class="line"><span style="color:#B392F0;">int32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num2</span></span>
<span class="line"><span style="color:#B392F0;">---</span></span>
<span class="line"><span style="color:#B392F0;">int32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sum</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li><strong>编辑配置文件</strong><strong>1.package.xml 文件</strong></li></ol><p>srv文件与msg文件的包依赖一致，如果你是新建的功能包添加srv文件，那么直接参考定义msg文件时package.xml 配置即可。由于我们使用的是base_interfaces_demo该包已经为msg文件配置过了依赖包，所以package.xml不需要做修改。<br></p><p><strong>2.CMakeLists.txt 文件</strong><br> 如果是新建的功能包，与之前定义msg文件同理，为了将.srv文件转换成对应的C++和Python代码，还需要在CMakeLists.txt中添加如下配置：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">find_package(rosidl_default_generators</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">REQUIRED</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">rosidl_generate_interfaces($</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">PROJECT_NAME</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;srv/AddInts.srv&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不过，我们当前使用的<code>base_interfaces_demo</code>包，那么你只需要修改<code>rosidl_generate_interfaces</code>函数即可，修改后的内容如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">rosidl_generate_interfaces($</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">PROJECT_NAME</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;msg/Student.msg&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;srv/AddInts.srv&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>编译</li></ol><p>终端中进入当前工作空间，编译功能包：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--packages-select</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">base_interfaces_demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>测试</li></ol><p>编译完成之后，在工作空间下的 install 目录下将生成AddInts.srv文件对应的C++和Python文件，我们也可以在终端下进入工作空间，通过如下命令查看文件定义以及编译是否正常：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install/setup.bash</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">show</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">base_interfaces_demo/srv/AddInts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>正常情况下，终端将会输出与AddInts.srv文件一致的内容。</p><h3 id="服务端实现" tabindex="-1">服务端实现 <a class="header-anchor" href="#服务端实现" aria-label="Permalink to &quot;服务端实现&quot;">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">/*  </span></span>
<span class="line"><span style="color:#6A737D;">  需求：编写服务端，接收客户端发送请求，提取其中两个整型数据，相加后将结果响应回客户端。</span></span>
<span class="line"><span style="color:#6A737D;">  步骤：</span></span>
<span class="line"><span style="color:#6A737D;">    1.包含头文件；</span></span>
<span class="line"><span style="color:#6A737D;">    2.初始化 ROS2 客户端；</span></span>
<span class="line"><span style="color:#6A737D;">    3.定义节点类；</span></span>
<span class="line"><span style="color:#6A737D;">      3-1.创建服务端；</span></span>
<span class="line"><span style="color:#6A737D;">      3-2.处理请求数据并响应结果。</span></span>
<span class="line"><span style="color:#6A737D;">    4.调用spin函数，并传入节点对象指针；</span></span>
<span class="line"><span style="color:#6A737D;">    5.释放资源。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 1.包含头文件；</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;base_interfaces_demo/srv/add_ints.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">base_interfaces_demo</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">srv</span><span style="color:#E1E4E8;">::AddInts;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">placeholders</span><span style="color:#E1E4E8;">::_1;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">placeholders</span><span style="color:#E1E4E8;">::_2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.定义节点类；</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MinimalService</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">MinimalService</span><span style="color:#E1E4E8;">():</span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;minimal_service&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#6A737D;">      // 3-1.创建服务端；</span></span>
<span class="line"><span style="color:#E1E4E8;">      server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">-&gt;create_service</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AddInts</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;add_ints&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">MinimalService</span><span style="color:#E1E4E8;">::add, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, _1, _2));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">RCLCPP_INFO</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">-&gt;</span><span style="color:#B392F0;">get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;add_ints 服务端启动完毕，等待请求提交...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">AddInts</span><span style="color:#E1E4E8;">&gt;::SharedPtr server;</span></span>
<span class="line"><span style="color:#6A737D;">    // 3-2.处理请求数据并响应结果。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddInts</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">SharedPtr</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddInts</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">SharedPtr</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      res-&gt;sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req-&gt;num1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> req-&gt;num2;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">RCLCPP_INFO</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">-&gt;</span><span style="color:#B392F0;">get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;请求数据:(</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">,</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">),响应结果:</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, req-&gt;num1, req-&gt;num2, res-&gt;sum);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">[])</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  // 2.初始化 ROS2 客户端；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(argc,argv);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 4.调用spin函数，并传入节点对象指针；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">auto</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">make_shared</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MinimalService</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">spin</span><span style="color:#E1E4E8;">(server);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 5.释放资源。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h3 id="客户端实现" tabindex="-1">客户端实现 <a class="header-anchor" href="#客户端实现" aria-label="Permalink to &quot;客户端实现&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">/*</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">需求：编写客户端，发送两个整型变量作为请求数据，并处理响应结果。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">步骤：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">1.包含头文件；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">2.初始化</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ROS2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">客户端；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">3.定义节点类；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">3-1.创建客户端；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">3-2.等待服务连接；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">3-3.组织请求数据并发送；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">4.创建对象指针调用其功能,并处理响应；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">5.释放资源。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">/</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">.包含头文件；</span></span>
<span class="line"><span style="color:#6A737D;">#include &quot;rclcpp/rclcpp.hpp&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#include &quot;base_interfaces_demo/srv/add_ints.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">base_interfaces_demo::srv::AddInts</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">std::chrono_literals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.定义节点类；</span></span>
<span class="line"><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MinimalClient:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rclcpp::Node{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">MinimalClient</span><span style="color:#E1E4E8;">():Node(</span><span style="color:#9ECBFF;">&quot;minimal_client&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">-</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">.创建客户端；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">this</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">create_client</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">AddInt</span><span style="color:#E1E4E8;">s</span><span style="color:#9ECBFF;">&gt;(&quot;add_ints&quot;)</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">RCLCPP_INFO(this-&gt;get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;客户端创建，等待连接服务端！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">-</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">.等待服务连接；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">connect_server</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">client-&gt;wait_for_service(1s</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">rclcpp::ok(</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&quot;强制退出！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">RCLCPP_INFO(this-&gt;get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;服务连接中，请稍候...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">-</span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.组织请求数据并发送；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rclcpp::Client&lt;AddInts&gt;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">:FutureAndRequestId</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">send_request</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num2</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">auto</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">std::make_shared</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">AddInts::Reques</span><span style="color:#E1E4E8;">t</span><span style="color:#9ECBFF;">&gt;()</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">request-&gt;num1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">request-&gt;num2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">async_send_request</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rclcpp::Client&lt;AddInts&gt;</span><span style="color:#79B8FF;">:</span><span style="color:#B392F0;">:SharedPtr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argc,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argv</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">argc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&quot;请提交两个整型数据！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">.初始化</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ROS2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">客户端；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp::init(argc,argv</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">.创建对象指针并调用其功能；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">auto</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">std::make_shared</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">MinimalClien</span><span style="color:#E1E4E8;">t</span><span style="color:#9ECBFF;">&gt;()</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flag</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">connect_server</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">flag</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&quot;服务连接失败！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">auto</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">send_request</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">atoi(argv[1</span><span style="color:#E1E4E8;">])</span><span style="color:#9ECBFF;">,atoi</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">argv[2</span><span style="color:#E1E4E8;">]));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">处理响应</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">rclcpp::spin_until_future_complete(client,response</span><span style="color:#E1E4E8;">) == rclcpp::FutureReturnCode::SUCCESS)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RCLCPP_INFO(client-&gt;get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;请求正常处理&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RCLCPP_INFO(client-&gt;get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;响应结果:%d!&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">response.get</span><span style="color:#E1E4E8;">()-</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">sum);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RCLCPP_INFO(client-&gt;get_logger</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;请求异常&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">.释放资源。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">rclcpp::shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div><h3 id="编辑配置文件" tabindex="-1">编辑配置文件 <a class="header-anchor" href="#编辑配置文件" aria-label="Permalink to &quot;编辑配置文件&quot;">​</a></h3><p>1.packages.xml</p><p>在创建功能包时，所依赖的功能包已经自动配置了，配置内容如下：</p>`,39),B=a(`<p>2.CMakeLists.txt</p><p>CMakeLists.txt 中服务端和客户端程序核心配置如下：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(ament_cmake REQUIRED)</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(rclcpp REQUIRED)</span></span>
<span class="line"><span style="color:#B392F0;">find_package</span><span style="color:#E1E4E8;">(base_interfaces_demo REQUIRED)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">add_executable</span><span style="color:#E1E4E8;">(demo01_server src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">demo01_server.cpp)</span></span>
<span class="line"><span style="color:#B392F0;">ament_target_dependencies</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  demo01_server</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;rclcpp&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;base_interfaces_demo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">add_executable</span><span style="color:#E1E4E8;">(demo02_client src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">demo02_client.cpp)</span></span>
<span class="line"><span style="color:#B392F0;">ament_target_dependencies</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  demo02_client</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;rclcpp&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;base_interfaces_demo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(TARGETS </span></span>
<span class="line"><span style="color:#E1E4E8;">  demo01_server</span></span>
<span class="line"><span style="color:#E1E4E8;">  demo02_client</span></span>
<span class="line"><span style="color:#E1E4E8;">  DESTINATION lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\${PROJECT_NAME})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h3><p>终端中进入当前工作空间，编译功能包：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">colcon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--packages-select</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp02_service</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="执行" tabindex="-1">执行 <a class="header-anchor" href="#执行" aria-label="Permalink to &quot;执行&quot;">​</a></h3><p>当前工作空间下，启动两个终端，终端1执行服务端程序，终端2执行客户端程序。</p><p>终端1输入如下指令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install/setup.bash</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp02_service</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo01_server</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>终端2输入如下指令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install/setup.bash</span></span>
<span class="line"><span style="color:#B392F0;">ros2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp02_service</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo02_client</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,12);function C(o,h,g,_,v,q){const l=i("depend");return c(),t("div",null,[n("h1",b,[s(E(o.$frontmatter.title)+" ",1),F]),u,s(" 服务通信中，服务端与客户端是一对多的关系，也即，同一服务话题下，存在多个客户端，每个客户端都可以向服务端发送请求。 "),d,s(" ## 作用 用于偶然的、对实时性有要求、有一定逻辑处理需求的数据传输场景。 "),m,p(l,null,{default:e(()=>[s("rclcpp")]),_:1}),p(l,null,{default:e(()=>[s("base_interfaces_demo")]),_:1}),B])}const A=r(y,[["render",C]]);export{f as __pageData,A as default};
