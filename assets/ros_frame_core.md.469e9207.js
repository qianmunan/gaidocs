import{_ as e,o as s,c as r,z as a,a as o,t as l,V as i}from"./chunks/framework.055571f3.js";const S=JSON.parse('{"title":"核心模块","description":"","frontmatter":{"title":"核心模块"},"headers":[],"relativePath":"ros/frame/core.md","filePath":"ros/frame/core.md","lastUpdated":1681960495000}'),n={name:"ros/frame/core.md"},c={id:"frontmatter-title",tabindex:"-1"},p=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}}"'},"​",-1),d=i('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通信与工具是ROS2的核心模块，也是我们以后学习和工作的重点所在。</p></div><h2 id="通信模块" tabindex="-1">通信模块 <a class="header-anchor" href="#通信模块" aria-label="Permalink to &quot;通信模块&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">声明</p><p>无通信，不自动。</p></div><p>通信模块是整个ROS2架构中的重中之重，比如你可能想要了解在ROS2中是如何控制机器人底盘运动的？雷达、摄像头、imu、GPS等这些传感器数据是如何传输到ROS2系统的？人机交互时调用者如何下发指令，机器人又是如何反馈数据的？导航、机械臂等系统性实现不同模块之间是如何交互数据的......等等，其实这些都离不开通信模块。</p><h2 id="功能包应用" tabindex="-1">功能包应用 <a class="header-anchor" href="#功能包应用" aria-label="Permalink to &quot;功能包应用&quot;">​</a></h2><p>功能包的应用主要有三种方式：</p><ol><li>二进制安装 ROS官方或社区提供的功能包可以很方便的通过二进制方式安装，安装命令如下： sudo apt install ros-ROS2版本代号-功能包名称</li></ol><div class="tip custom-block"><p class="custom-block-title">小提示：</p><p>可以调用apt search ros-ROS2版本代号-* | grep -i 关键字格式的命令，根据关键字查找所需的功能包。</p></div><ol start="2"><li>源码安装 也可以直接下载官方、社区或其他第三方提供的源代码，一般我们会从github获取源码，下载命令如下：</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">仓库地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>源码下载后，需要自行编译。<br> 3. 自实现<br> 开发者按照业务需求自己编写功能包实现。</p><h2 id="分布式" tabindex="-1">分布式 <a class="header-anchor" href="#分布式" aria-label="Permalink to &quot;分布式&quot;">​</a></h2><p>ROS2是一个分布式架构，不同的ROS2设备之间可以方便的实现通信，这在多机器人设备协同中是极其重要的。</p><h2 id="终端命令与rqt" tabindex="-1">终端命令与rqt <a class="header-anchor" href="#终端命令与rqt" aria-label="Permalink to &quot;终端命令与rqt&quot;">​</a></h2><p>在ROS2中提供了丰富的命令行工具，可以方便的调试程序、提高开发效率。</p><p>rqt是一个图形化工具，它的功能与命令行工具类似，但是图形化的交互方式更为友好。</p><h2 id="launch文件" tabindex="-1">launch文件 <a class="header-anchor" href="#launch文件" aria-label="Permalink to &quot;launch文件&quot;">​</a></h2><p>通过launch文件，可以批量的启动ROS2节点，这是在构建大型项目时启动多节点的常用方式。</p><h2 id="tf坐标变换" tabindex="-1">TF坐标变换 <a class="header-anchor" href="#tf坐标变换" aria-label="Permalink to &quot;TF坐标变换&quot;">​</a></h2><p>TF坐标变换可以实现机器人不同部件或不同机器人之间的相对位置关系的转换。</p><h2 id="可视化" tabindex="-1">可视化 <a class="header-anchor" href="#可视化" aria-label="Permalink to &quot;可视化&quot;">​</a></h2><p>ROS2内置了三维可视化工具rviz2，它可以图形化的方式显示机器人模型或显示机器人系统中的一些抽象数据。</p>',22);function h(t,u,m,b,_,f){return s(),r("div",null,[a("h1",c,[o(l(t.$frontmatter.title)+" ",1),p]),d])}const k=e(n,[["render",h]]);export{S as __pageData,k as default};
